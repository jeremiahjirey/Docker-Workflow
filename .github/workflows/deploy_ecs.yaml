name: Deploy To Amazon ECS 

on: 
  push:
    branches:
      - "main"
    paths:
      - .github/workflows/deploy_ecs_wotkflow.yaml
      - worker/**"

env: 
  AWS_REGION: us-east-1                 
  ECR_REPOSITORY: showipjs
  ECS_SERVICE_WORKER: worker-service       
  ECS_CLUSTER: worker-cluster
  WORKER_TASK_DEFINITION: worker/task-definition.json
  WORKER_CONTAINER_NAME: worker-showipserver
  ENV: "prod"

jobs:
  deploy:
   runs-on: ubuntu-latest
   steps:
     - name: Checkout Code
       uses: actions/checkout@v3

     - name: Configure AWS Credential
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  
         aws-region: ${{ secrets.AWS_REGION }}

     - name: Login To ECR 
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1

     - name: Set Variable
       id: set-vars
       env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         WORKER_IMAGE_TAG: app-${{ env.ENV }}-latest
       run: |
         echo "::set-output name=worker_image::$ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG"

     - name: Fill in the new image ID in the Amazon ECS task definition (Worker)
       id: task-def-worker
       uses: aws-actions/amazon-ecs-render-task-definition@v1
       with:
         task-definition: ${{ env.WORKER_TASK_DEFINITION }}
         container-name: ${{ env.WORKER_CONTAINER_NAME }}
         image: ${{ steps.set-vars.outputs.worker_image }}

     - name: Deploy Amazon ECS task definition Worker
       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
       with:
         task-definition: ${{ steps.task-def-worker.outputs.task-definition }}
         service: ${{ env.ECS_SERVICE_WORKER }}
         cluster: ${{ env.ECS_CLUSTER }}
         wait-for-service-stability: true



